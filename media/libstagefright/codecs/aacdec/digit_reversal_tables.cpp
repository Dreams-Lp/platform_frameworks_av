/* ------------------------------------------------------------------
 * Copyright (C) 1998-2009 PacketVideo
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 * -------------------------------------------------------------------
 */
/*

 Pathname: ./src/digit_reversal_tables.c
 Funtions:

------------------------------------------------------------------------------
 REVISION HISTORY

 Who:                       Date:
 Description:

  ------------------------------------------------------------------------------
 MODULE DESCRIPTION

  Tables for digit reverse operation

------------------------------------------------------------------------------
*/


/*----------------------------------------------------------------------------
; INCLUDES
----------------------------------------------------------------------------*/

#include "digit_reversal_tables.h"
#include "imdct_fxp.h"

/*----------------------------------------------------------------------------
; MACROS
; Define module specific macros here
----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
; DEFINES
; Include all pre-processor statements here. Include conditional
; compile variables also.
----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
; LOCAL FUNCTION DEFINITIONS
; Function Prototype declaration
----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
; LOCAL VARIABLE DEFINITIONS
; Variable declaration - defined here and used outside this module
----------------------------------------------------------------------------*/


/*----------------------------------------------------------------------------
; EXTERNAL FUNCTION REFERENCES
; Declare functions defined elsewhere and referenced in this module
----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
; EXTERNAL VARIABLES REFERENCES
; Declare variables used in this module but defined elsewhere
----------------------------------------------------------------------------*/

/*
------------------------------------------------------------------------------
 Digit Reverse tables
------------------------------------------------------------------------------
*/

const Int16 digit_reverse_64[ 64] =
{
    + 0,  + 32,  + 64,  + 96,
    + 8,  + 40,  + 72, + 104,
    + 16,  + 48,  + 80, + 112,
    + 24,  + 56,  + 88, + 120,
    + 2,  + 34,  + 66,  + 98,
    + 10,  + 42,  + 74, + 106,
    + 18,  + 50,  + 82, + 114,
    + 26,  + 58,  + 90, + 122,
    + 4,  + 36,  + 68, + 100,
    + 12,  + 44,  + 76, + 108,
    + 20,  + 52,  + 84, + 116,
    + 28,  + 60,  + 92, + 124,
    + 6,  + 38,  + 70, + 102,
    + 14,  + 46,  + 78, + 110,
    + 22,  + 54,  + 86, + 118,
    + 30,  + 62,  + 94, + 126
};


const Int16 digit_reverse_256[ 256] =
{
    + 0, + 128, + 256, + 384,
    + 32, + 160, + 288, + 416,
    + 64, + 192, + 320, + 448,
    + 96, + 224, + 352, + 480,
    + 8, + 136, + 264, + 392,
    + 40, + 168, + 296, + 424,
    + 72, + 200, + 328, + 456,
    + 104, + 232, + 360, + 488,
    + 16, + 144, + 272, + 400,
    + 48, + 176, + 304, + 432,
    + 80, + 208, + 336, + 464,
    + 112, + 240, + 368, + 496,
    + 24, + 152, + 280, + 408,
    + 56, + 184, + 312, + 440,
    + 88, + 216, + 344, + 472,
    + 120, + 248, + 376, + 504,
    + 2, + 130, + 258, + 386,
    + 34, + 162, + 290, + 418,
    + 66, + 194, + 322, + 450,
    + 98, + 226, + 354, + 482,
    + 10, + 138, + 266, + 394,
    + 42, + 170, + 298, + 426,
    + 74, + 202, + 330, + 458,
    + 106, + 234, + 362, + 490,
    + 18, + 146, + 274, + 402,
    + 50, + 178, + 306, + 434,
    + 82, + 210, + 338, + 466,
    + 114, + 242, + 370, + 498,
    + 26, + 154, + 282, + 410,
    + 58, + 186, + 314, + 442,
    + 90, + 218, + 346, + 474,
    + 122, + 250, + 378, + 506,
    + 4, + 132, + 260, + 388,
    + 36, + 164, + 292, + 420,
    + 68, + 196, + 324, + 452,
    + 100, + 228, + 356, + 484,
    + 12, + 140, + 268, + 396,
    + 44, + 172, + 300, + 428,
    + 76, + 204, + 332, + 460,
    + 108, + 236, + 364, + 492,
    + 20, + 148, + 276, + 404,
    + 52, + 180, + 308, + 436,
    + 84, + 212, + 340, + 468,
    + 116, + 244, + 372, + 500,
    + 28, + 156, + 284, + 412,
    + 60, + 188, + 316, + 444,
    + 92, + 220, + 348, + 476,
    + 124, + 252, + 380, + 508,
    + 6, + 134, + 262, + 390,
    + 38, + 166, + 294, + 422,
    + 70, + 198, + 326, + 454,
    + 102, + 230, + 358, + 486,
    + 14, + 142, + 270, + 398,
    + 46, + 174, + 302, + 430,
    + 78, + 206, + 334, + 462,
    + 110, + 238, + 366, + 494,
    + 22, + 150, + 278, + 406,
    + 54, + 182, + 310, + 438,
    + 86, + 214, + 342, + 470,
    + 118, + 246, + 374, + 502,
    + 30, + 158, + 286, + 414,
    + 62, + 190, + 318, + 446,
    + 94, + 222, + 350, + 478,
    + 126, + 254, + 382, + 510
};




const Int16 digit_reverse_swap_256[ 241] =
{
    + 2, + 128,   + 4, + 256,
    + 6, + 384,   + 8,  + 32,
    + 10, + 160,  + 12, + 288,
    + 14, + 416,  + 16,  + 64,
    + 18, + 192,  + 20, + 320,
    + 22, + 448,  + 24,  + 96,
    + 26, + 224,  + 28, + 352,
    + 30, + 480,  + 34, + 136,
    + 36, + 264,  + 38, + 392,
    + 42, + 168,  + 44, + 296,
    + 46, + 424,  + 48,  + 72,
    + 50, + 200,  + 52, + 328,
    + 54, + 456,  + 56, + 104,
    + 58, + 232,  + 60, + 360,
    + 62, + 488,  + 66, + 144,
    + 68, + 272,  + 70, + 400,
    + 74, + 176,  + 76, + 304,
    + 78, + 432,  + 82, + 208,
    + 84, + 336,  + 86, + 464,
    + 88, + 112,  + 90, + 240,
    + 92, + 368,  + 94, + 496,
    + 98, + 152, + 100, + 280,
    + 102, + 408, + 106, + 184,
    + 108, + 312, + 110, + 440,
    + 114, + 216, + 116, + 344,
    + 118, + 472, + 122, + 248,
    + 124, + 376, + 126, + 504,
    + 132, + 258, + 134, + 386,
    + 138, + 162, + 140, + 290,
    + 142, + 418, + 146, + 194,
    + 148, + 322, + 150, + 450,
    + 154, + 226, + 156, + 354,
    + 158, + 482, + 164, + 266,
    + 166, + 394, + 172, + 298,
    + 174, + 426, + 178, + 202,
    + 180, + 330, + 182, + 458,
    + 186, + 234, + 188, + 362,
    + 190, + 490, + 196, + 274,
    + 198, + 402, + 204, + 306,
    + 206, + 434, + 212, + 338,
    + 214, + 466, + 218, + 242,
    + 220, + 370, + 222, + 498,
    + 228, + 282, + 230, + 410,
    + 236, + 314, + 238, + 442,
    + 244, + 346, + 246, + 474,
    + 252, + 378, + 254, + 506,
    + 262, + 388, + 268, + 292,
    + 270, + 420, + 276, + 324,
    + 278, + 452, + 284, + 356,
    + 286, + 484, + 294, + 396,
    + 302, + 428, + 308, + 332,
    + 310, + 460, + 316, + 364,
    + 318, + 492, + 326, + 404,
    + 334, + 436, + 342, + 468,
    + 348, + 372, + 350, + 500,
    + 358, + 412, + 366, + 444,
    + 374, + 476, + 382, + 508,
    + 398, + 422, + 406, + 454,
    + 414, + 486, + 438, + 462,
    + 446, + 494, + 478, + 502
};


#ifdef MIPS32

const Int16 digit_reverse_swap_modified_256[ 241] =
{
    + 2   << 2, + 128 << 2,  + 4  << 2, + 256 << 2,
    + 6   << 2, + 384 << 2,  + 8  << 2, + 32  << 2,
    + 10  << 2, + 160 << 2,  + 12 << 2, + 288 << 2,
    + 14  << 2, + 416 << 2,  + 16 << 2, + 64  << 2,
    + 18  << 2, + 192 << 2,  + 20 << 2, + 320 << 2,
    + 22  << 2, + 448 << 2,  + 24 << 2, + 96  << 2,
    + 26  << 2, + 224 << 2,  + 28 << 2, + 352 << 2,
    + 30  << 2, + 480 << 2,  + 34 << 2, + 136 << 2,
    + 36  << 2, + 264 << 2,  + 38 << 2, + 392 << 2,
    + 42  << 2, + 168 << 2,  + 44 << 2, + 296 << 2,
    + 46  << 2, + 424 << 2,  + 48 << 2, + 72  << 2,
    + 50  << 2, + 200 << 2,  + 52 << 2, + 328 << 2,
    + 54  << 2, + 456 << 2,  + 56 << 2, + 104 << 2,
    + 58  << 2, + 232 << 2,  + 60 << 2, + 360 << 2,
    + 62  << 2, + 488 << 2,  + 66 << 2, + 144 << 2,
    + 68  << 2, + 272 << 2,  + 70 << 2, + 400 << 2,
    + 74  << 2, + 176 << 2,  + 76 << 2, + 304 << 2,
    + 78  << 2, + 432 << 2,  + 82 << 2, + 208 << 2,
    + 84  << 2, + 336 << 2,  + 86 << 2, + 464 << 2,
    + 88  << 2, + 112 << 2,  + 90 << 2, + 240 << 2,
    + 92  << 2, + 368 << 2,  + 94 << 2, + 496 << 2,
    + 98  << 2, + 152 << 2, + 100 << 2, + 280 << 2,
    + 102 << 2, + 408 << 2, + 106 << 2, + 184 << 2,
    + 108 << 2, + 312 << 2, + 110 << 2, + 440 << 2,
    + 114 << 2, + 216 << 2, + 116 << 2, + 344 << 2,
    + 118 << 2, + 472 << 2, + 122 << 2, + 248 << 2,
    + 124 << 2, + 376 << 2, + 126 << 2, + 504 << 2,
    + 132 << 2, + 258 << 2, + 134 << 2, + 386 << 2,
    + 138 << 2, + 162 << 2, + 140 << 2, + 290 << 2,
    + 142 << 2, + 418 << 2, + 146 << 2, + 194 << 2,
    + 148 << 2, + 322 << 2, + 150 << 2, + 450 << 2,
    + 154 << 2, + 226 << 2, + 156 << 2, + 354 << 2,
    + 158 << 2, + 482 << 2, + 164 << 2, + 266 << 2,
    + 166 << 2, + 394 << 2, + 172 << 2, + 298 << 2,
    + 174 << 2, + 426 << 2, + 178 << 2, + 202 << 2,
    + 180 << 2, + 330 << 2, + 182 << 2, + 458 << 2,
    + 186 << 2, + 234 << 2, + 188 << 2, + 362 << 2,
    + 190 << 2, + 490 << 2, + 196 << 2, + 274 << 2,
    + 198 << 2, + 402 << 2, + 204 << 2, + 306 << 2,
    + 206 << 2, + 434 << 2, + 212 << 2, + 338 << 2,
    + 214 << 2, + 466 << 2, + 218 << 2, + 242 << 2,
    + 220 << 2, + 370 << 2, + 222 << 2, + 498 << 2,
    + 228 << 2, + 282 << 2, + 230 << 2, + 410 << 2,
    + 236 << 2, + 314 << 2, + 238 << 2, + 442 << 2,
    + 244 << 2, + 346 << 2, + 246 << 2, + 474 << 2,
    + 252 << 2, + 378 << 2, + 254 << 2, + 506 << 2,
    + 262 << 2, + 388 << 2, + 268 << 2, + 292 << 2,
    + 270 << 2, + 420 << 2, + 276 << 2, + 324 << 2,
    + 278 << 2, + 452 << 2, + 284 << 2, + 356 << 2,
    + 286 << 2, + 484 << 2, + 294 << 2, + 396 << 2,
    + 302 << 2, + 428 << 2, + 308 << 2, + 332 << 2,
    + 310 << 2, + 460 << 2, + 316 << 2, + 364 << 2,
    + 318 << 2, + 492 << 2, + 326 << 2, + 404 << 2,
    + 334 << 2, + 436 << 2, + 342 << 2, + 468 << 2,
    + 348 << 2, + 372 << 2, + 350 << 2, + 500 << 2,
    + 358 << 2, + 412 << 2, + 366 << 2, + 444 << 2,
    + 374 << 2, + 476 << 2, + 382 << 2, + 508 << 2,
    + 398 << 2, + 422 << 2, + 406 << 2, + 454 << 2,
    + 414 << 2, + 486 << 2, + 438 << 2, + 462 << 2,
    + 446 << 2, + 494 << 2, + 478 << 2, + 502 << 2
};

#endif /* MIPS32 */

#ifdef __cplusplus
extern "C"
{
#endif

    void digit_reversal_swapping(Int32 *y, Int32 *x);

#ifdef __cplusplus
}
#endif

void digit_reversal_swapping(Int32 *y, Int32 *x)
{
    Int16 i, j;
    Int32 tmp[2];
    const Int16 *pTable;

    pTable = digit_reverse_swap_256;

#ifdef MIPS32

    Int32 *yi, *yj, *xi, *xj, temp1, temp2, temp3, temp4, temp5, temp6;
    pTable = digit_reverse_swap_modified_256;

    for (Int k = 30; k != 0; k--)
    {
        __asm__ volatile(
            "lh         %[temp1],       0(%[pTable])                    \n\t"
            "lh         %[temp2],       2(%[pTable])                    \n\t"
            "addu       %[yi],          %[y],               %[temp1]    \n\t"
            "addu       %[yj],          %[y],               %[temp2]    \n\t"
            "lw         %[temp3],       0(%[yi])                        \n\t"
            "lw         %[temp4],       4(%[yi])                        \n\t"
            "lw         %[temp5],       0(%[yj])                        \n\t"
            "lw         %[temp6],       4(%[yj])                        \n\t"
            "sw         %[temp3],       0(%[yj])                        \n\t"
            "sw         %[temp4],       4(%[yj])                        \n\t"
            "sw         %[temp5],       0(%[yi])                        \n\t"
            "sw         %[temp6],       4(%[yi])                        \n\t"

            "addu       %[xi],          %[x],               %[temp1]    \n\t"
            "addu       %[xj],          %[x],               %[temp2]    \n\t"
            "lw         %[temp3],       0(%[xi])                        \n\t"
            "lw         %[temp4],       4(%[xi])                        \n\t"
            "lw         %[temp5],       0(%[xj])                        \n\t"
            "lw         %[temp6],       4(%[xj])                        \n\t"
            "lh         %[temp1],       4(%[pTable])                    \n\t"
            "lh         %[temp2],       6(%[pTable])                    \n\t"
            "sw         %[temp3],       0(%[xj])                        \n\t"
            "sw         %[temp4],       4(%[xj])                        \n\t"
            "sw         %[temp5],       0(%[xi])                        \n\t"
            "sw         %[temp6],       4(%[xi])                        \n\t"

            "addu       %[yi],          %[y],               %[temp1]    \n\t"
            "addu       %[yj],          %[y],               %[temp2]    \n\t"
            "lw         %[temp3],       0(%[yi])                        \n\t"
            "lw         %[temp4],       4(%[yi])                        \n\t"
            "lw         %[temp5],       0(%[yj])                        \n\t"
            "lw         %[temp6],       4(%[yj])                        \n\t"
            "sw         %[temp3],       0(%[yj])                        \n\t"
            "sw         %[temp4],       4(%[yj])                        \n\t"
            "sw         %[temp5],       0(%[yi])                        \n\t"
            "sw         %[temp6],       4(%[yi])                        \n\t"

            "addu       %[xi],          %[x],               %[temp1]    \n\t"
            "addu       %[xj],          %[x],               %[temp2]    \n\t"
            "lw         %[temp3],       0(%[xi])                        \n\t"
            "lw         %[temp4],       4(%[xi])                        \n\t"
            "lw         %[temp5],       0(%[xj])                        \n\t"
            "lw         %[temp6],       4(%[xj])                        \n\t"
            "lh         %[temp1],       8(%[pTable])                    \n\t"
            "lh         %[temp2],       10(%[pTable])                   \n\t"
            "sw         %[temp3],       0(%[xj])                        \n\t"
            "sw         %[temp4],       4(%[xj])                        \n\t"
            "sw         %[temp5],       0(%[xi])                        \n\t"
            "sw         %[temp6],       4(%[xi])                        \n\t"

            "addu       %[yi],          %[y],               %[temp1]    \n\t"
            "addu       %[yj],          %[y],               %[temp2]    \n\t"
            "lw         %[temp3],       0(%[yi])                        \n\t"
            "lw         %[temp4],       4(%[yi])                        \n\t"
            "lw         %[temp5],       0(%[yj])                        \n\t"
            "lw         %[temp6],       4(%[yj])                        \n\t"
            "sw         %[temp3],       0(%[yj])                        \n\t"
            "sw         %[temp4],       4(%[yj])                        \n\t"
            "sw         %[temp5],       0(%[yi])                        \n\t"
            "sw         %[temp6],       4(%[yi])                        \n\t"

            "addu       %[xi],          %[x],               %[temp1]    \n\t"
            "addu       %[xj],          %[x],               %[temp2]    \n\t"
            "lw         %[temp3],       0(%[xi])                        \n\t"
            "lw         %[temp4],       4(%[xi])                        \n\t"
            "lw         %[temp5],       0(%[xj])                        \n\t"
            "lw         %[temp6],       4(%[xj])                        \n\t"
            "lh         %[temp1],       12(%[pTable])                   \n\t"
            "lh         %[temp2],       14(%[pTable])                   \n\t"
            "sw         %[temp3],       0(%[xj])                        \n\t"
            "sw         %[temp4],       4(%[xj])                        \n\t"
            "sw         %[temp5],       0(%[xi])                        \n\t"
            "sw         %[temp6],       4(%[xi])                        \n\t"

            "addiu      %[pTable],      %[pTable],          16          \n\t"
            "addu       %[yi],          %[y],               %[temp1]    \n\t"
            "addu       %[yj],          %[y],               %[temp2]    \n\t"
            "lw         %[temp3],       0(%[yi])                        \n\t"
            "lw         %[temp4],       4(%[yi])                        \n\t"
            "lw         %[temp5],       0(%[yj])                        \n\t"
            "lw         %[temp6],       4(%[yj])                        \n\t"
            "sw         %[temp3],       0(%[yj])                        \n\t"
            "sw         %[temp4],       4(%[yj])                        \n\t"
            "sw         %[temp5],       0(%[yi])                        \n\t"
            "sw         %[temp6],       4(%[yi])                        \n\t"

            "addu       %[xi],          %[x],               %[temp1]    \n\t"
            "addu       %[xj],          %[x],               %[temp2]    \n\t"
            "lw         %[temp3],       0(%[xi])                        \n\t"
            "lw         %[temp4],       4(%[xi])                        \n\t"
            "lw         %[temp5],       0(%[xj])                        \n\t"
            "lw         %[temp6],       4(%[xj])                        \n\t"
            "sw         %[temp3],       0(%[xj])                        \n\t"
            "sw         %[temp4],       4(%[xj])                        \n\t"
            "sw         %[temp5],       0(%[xi])                        \n\t"
            "sw         %[temp6],       4(%[xi])                        \n\t"

            : [temp1] "=&r" (temp1), [temp2] "=&r" (temp2), [temp3] "=&r" (temp3),
              [temp4] "=&r" (temp4), [temp5] "=&r" (temp5), [temp6] "=&r" (temp6),
              [yi] "=&r" (yi), [yj] "=&r" (yj), [xi] "=&r" (xi), [xj] "=&r" (xj),
              [pTable] "+r" (pTable)
            : [y] "r" (y), [x] "r" (x)
            : "memory"
        );
    }

#else /* MIPS32 */

    for (Int k = 120; k != 0; k--)
    {
        i = *pTable++;
        j = *pTable++;
        tmp[0] = y[i];
        tmp[1] = y[i+1];
        y[i]   = y[j];
        y[i+1] = y[j+1];
        y[j]   = tmp[0];
        y[j+1] = tmp[1];

        tmp[0] = x[j];
        tmp[1] = x[j+1];
        x[j]   = x[i];
        x[j+1] = x[i+1];
        x[i]   = tmp[0];
        x[i+1] = tmp[1];

    }

#endif /* MIPS32 */
}
